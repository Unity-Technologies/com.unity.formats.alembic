editors:
  - version: 2019.4
  - version: 2020.2
  - version: 2021.1
  - version: trunk

platforms:
  - name: win
    type: Unity::VM
    # win10:stable fails clean console test in trunk because of warning: Unity is running with Administrator privileges, which is not supported.
    # Use win10:v2.0.1 which has UAC enabled to workaround that.
    image: package-ci/win10:v2.0.1
    flavor: b1.large
  - name: mac
    type: Unity::VM::osx
    image: package-ci/mac:stable
    flavor: m1.mac
#  - name: centOS
#    type: Unity::VM::GPU
#    image: package-ci/centos:latest
#    flavor: b1.large
  - name: ubuntu
    type: Unity::VM
    image: package-ci/ubuntu-20:stable
    flavor: b1.large



standalone_platforms:
  - name: win
    image: package-ci/win10:stable
    flavor: b1.large
    runtime: standalone
    type: Unity::VM
  - name: mac
    type: Unity::VM::osx
    image: package-ci/mac:stable
    flavor: m1.mac
    runtime: standalone

bizarro_standalone_platforms:
  - name: mac_m2
    type: Unity::metal::devkit
    image: package-ci/mac:stable
    flavor: m1.mac
    runtime: standalone
  - name: centOS
    type: Unity::VM::GPU
    image: package-ci/centos:latest
    flavor: b1.large
    runtime: standalone
  - name: ubuntu
    type: Unity::VM::GPU
    image: package-ci/ubuntu:stable
    flavor: b1.large
    runtime: standalone
  #- name: stadia
  #  type: Unity::VM
  #  image: desktop/stadia-bka-katana:stable
  #  flavor: b1.large
  #  runtime: stadia

---
docs-validate:
  name: API docs validation
  agent:
    type: Unity::VM
    image: package-ci/ubuntu:stable
    flavor: b1.large
  commands:
    # Needed for now, until we get a recent upm-pvp into the image.
    - sudo apt-get update && sudo apt-get install -y upm-pvp
    - npm install -g upm-ci-utils@stable --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
    # Add 'com.unity.modules.imgui' dependency to alembic package because its upstream package 'com.unity.timeline' misses this dependency. 
    # If not adding this dependency, upm-pvp will fail to run because of compilation errors.
    - python -c "import json, sys; m = json.load(open(sys.argv[1])); m['dependencies']['com.unity.modules.imgui'] = '1.0.0';  json.dump(m, open(sys.argv[1], 'w'))" com.unity.formats.alembic/package.json
    - upm-ci package pack --package-path com.unity.formats.alembic
    # Download Unity.
    - unity-downloader-cli --fast --wait -u 2020.2 -c editor
    # Run PVS in PVP mode.
    - upm-pvp test --unity .Editor --packages "upm-ci~/packages/*.tgz" --results "upm-ci~/pvp"
    # Require that PVP-20-1 (API docs validation) passed.
    - upm-pvp require PVP-20-1 --results "upm-ci~/pvp" --failures "upm-ci~/pvp/failures.json"
  artifacts:
    pvp:
      paths:
        - upm-ci~/pvp/**
    logs:
      paths:
        - upm-ci~/test-results/**

build_win:
  name: Build Win
  agent:
    type: Unity::VM
    image: package-ci/win10:stable
    flavor: b1.large
  commands:
    - git submodule update --init --recursive
    - build.cmd
  artifacts:
    build:
      paths:
        - "com.unity.formats.alembic/**/*"

build_mac:
  name: Build Mac
  agent:
    type: Unity::VM::osx
    image: package-ci/mac:stable
    flavor: m1.mac
  commands:
    - git submodule update --init --recursive
    - ./build.sh
  artifacts:
    build:
      paths:
        - "com.unity.formats.alembic/**/*"

build_centOS:
  name: Build CentOS
  agent:
    type: Unity::VM
    image: package-ci/centos:latest
    flavor: b1.large
  commands:
    -  git submodule update --init --recursive 
    -  scl enable devtoolset-7 ./build.sh
      
  artifacts:
    build:
      paths:
        - "com.unity.formats.alembic/**/*"

pack:
  name: Pack
  agent:
    type: Unity::VM
    image: package-ci/win10:stable
    flavor: b1.large
  commands:
    - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm 
    - upm-ci package pack --package-path com.unity.formats.alembic
  artifacts:
   packages:
     paths:
       - "upm-ci~/packages/**/*"
   build:
     paths:
       - "com.unity.formats.alembic/**/*"
  dependencies:
    - .yamato/upm-ci.yml#build_win
    - .yamato/upm-ci.yml#build_mac
    - .yamato/upm-ci.yml#build_centOS


{% for editor in editors %}
{% for platform in platforms %}
test_{{ platform.name }}_{{ editor.version }}:
  name : Test version {{ editor.version }} on {{ platform.name }}
  agent:
    type: {{ platform.type }}
    image: {{ platform.image }}
    flavor: {{ platform.flavor}}
  variables:
    UPMCI_ENABLE_APV_CLEAN_CONSOLE_TEST: 1
  commands:
     - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
     #- {% if platform.name == 'centOS' %} DISPLAY=:0 {% endif %} upm-ci package test --unity-version {{ editor.version }} --package-path com.unity.formats.alembic --enable-code-coverage --code-coverage-options 'enableCyclomaticComplexity;generateHtmlReport'
     - {% if platform.name == 'centOS' %} DISPLAY=:0 {% endif %} upm-ci package test --unity-version {{ editor.version }} --package-path com.unity.formats.alembic
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    artifacts.zip:
      paths:
        - "upm-ci~/packages/**/*"
        - "upm-ci~/templates/**/*"
  dependencies:
    - .yamato/upm-ci.yml#pack
{% endfor %}
{% endfor %}

{% for editor in editors %}
{% for platform in platforms %}
testProject_{{ platform.name }}_{{ editor.version }}:
  name : Test Project version {{ editor.version }} on {{ platform.name }}
  agent:
    type: {{ platform.type }}
    image: {{ platform.image }}
    flavor: {{ platform.flavor}}
  commands:
     - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
     #- {% if platform.name == 'centOS' %} DISPLAY=:0 {% endif %} upm-ci project test  --project-path TestProjects/AlembicRecorder --type project-tests --unity-version {{ editor.version }} --enable-code-coverage --code-coverage-options 'enableCyclomaticComplexity;generateHtmlReport'
     - {% if platform.name == 'centOS' %} DISPLAY=:0 {% endif %} upm-ci project test  --project-path TestProjects/AlembicRecorder --type project-tests --unity-version {{ editor.version }}
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    artifacts.zip:
      paths:
        - "upm-ci~/packages/**/*"
        - "upm-ci~/templates/**/*"
  dependencies:
    - .yamato/upm-ci.yml#pack
{% endfor %}
{% endfor %}

{% for editor in editors %}
{% for platform in standalone_platforms %}
testStandalone_{{ platform.name }}_{{ editor.version }}:
  name : Test Standalone on {{ platform.name }}_{{ editor.version }}
  agent:
    type: {{ platform.type }}
    image: {{ platform.image }}
    flavor: {{ platform.flavor}}
  commands:
     - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
     - {% if platform.name == 'centOS' %} DISPLAY=:0 {% endif %}  upm-ci project test  --project-path TestProjects/AlembicStandaloneBuild --type project-tests --unity-version {{ editor.version }} --platform {{ platform.runtime }}
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    artifacts.zip:
      paths:
        - "upm-ci~/packages/**/*"
        - "upm-ci~/templates/**/*"
  dependencies:
    - .yamato/upm-ci.yml#pack
{% endfor %}
{% endfor %}

{% for editor in editors %}
{% for platform in platforms %}
testProject_hdrp_{{ platform.name }}_{{ editor.version }}:
  name : Test HDRP version {{ editor.version }} on {{ platform.name }}
  agent:
    type: {{ platform.type }}
    image: {{ platform.image }}
    flavor: {{ platform.flavor}}
  commands:
     - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
     #- {% if platform.name == 'centOS' %} DISPLAY=:0 {% endif %} upm-ci project test  --project-path TestProjects/AlembicHDRP --type project-tests --unity-version {{ editor.version }} --enable-code-coverage --code-coverage-options 'enableCyclomaticComplexity;generateHtmlReport'
     - {% if platform.name == 'centOS' %} DISPLAY=:0 {% endif %} upm-ci project test  --project-path TestProjects/AlembicHDRP --type project-tests --unity-version {{ editor.version }}
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    artifacts.zip:
      paths:
        - "upm-ci~/packages/**/*"
        - "upm-ci~/templates/**/*"
  dependencies:
    - .yamato/upm-ci.yml#pack
{% endfor %}
{% endfor %}


test_trigger_hdrp:
  name: TestsTrigger_HDRP
  triggers:
    cancel_old_ci: true
  dependencies:
    - .yamato/upm-ci.yml#pack
    {% for editor in editors %}
    {% for platform in platforms %}
    {%- comment -%}
    # Disable hdrp test in trunk on Mac for now which fails nightly trigger because: 
    # First the test doesn't test too much. Second, we belive the failure is caused by HDRP in trunk
    {%- endcomment -%}
    {%- if editor.version == 'trunk' and platform.name == 'mac' -%}
    {%- continue -%}
    {%- endif -%}
    - .yamato/upm-ci.yml#testProject_hdrp_{{platform.name}}_{{editor.version}}
    {% endfor %}
    {% endfor %}

test_trigger:
  name: TestsTrigger
  triggers:
    cancel_old_ci: true
    expression: pull_request.target match ".*"
  dependencies:
    - .yamato/upm-ci.yml#docs-validate
    - .yamato/upm-ci.yml#pack
    {% for editor in editors %}
    {% for platform in platforms %}
    - .yamato/upm-ci.yml#test_{{platform.name}}_{{editor.version}}
    - .yamato/upm-ci.yml#testProject_{{platform.name}}_{{editor.version}}
    {% endfor %}
    
    {% for platform in standalone_platforms %}  
    - .yamato/upm-ci.yml#testStandalone_{{platform.name}}_{{editor.version}}
    {% endfor %}
    {% endfor %}
    - .yamato/upm-ci.yml#api_scrape_check_osx
    - .yamato/upm-ci.yml#api_scrape_check_win
    - .yamato/_formatting.yml#formatting

api_scrape_check_osx:
  name : Check API Scrape on OSX
  agent:
    type: Unity::VM::osx
    image: package-ci/mac:latest
    flavor: m1.mac
  commands:
    - git clone git@github.cds.internal.unity3d.com:unity/utr.git utr
    - unity-downloader-cli -u 2019.4 -c Editor
    - utr/utr --suite=editor --editor-location=.Editor --testproject=TestProjects/APITests --artifacts_path=artifacts --reruncount=0
  dependencies:
    - .yamato/upm-ci.yml#pack       
  artifacts:
    logs.zip:
      paths:
      - "upm-ci~/test-results/**/*"

api_scrape_check_win:
  name : Check API Scrape on Win
  agent:
    type: Unity::VM
    image: package-ci/win10:stable
    flavor: b1.large
  commands:
    - git clone git@github.cds.internal.unity3d.com:unity/utr.git utr
    - unity-downloader-cli -u 2019.4 -c Editor
    - utr/utr.bat --suite=editor --editor-location=.Editor --testproject=TestProjects/APITests --artifacts_path=artifacts --reruncount=0
  dependencies:
    - .yamato/upm-ci.yml#pack         
  artifacts:
    logs.zip:
      paths:
      - "upm-ci~/test-results/**/*"


{% for platform in bizarro_standalone_platforms %}
testBizarroStandalone_{{ platform.name }}:
  name : Test Standalone on {{ platform.name }}
  agent:
    type: {{ platform.type }}
    image: {{ platform.image }}
    flavor: {{ platform.flavor}}
  variables:
     UPMCI_ACK_DEPRECATED_PYTHON_UNITY_DOWNLOADER: 1
  commands:
     - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
     - {% if platform.name == 'centOS' platform.name == 'stadia' %} DISPLAY=:0 {% endif %}  upm-ci project test  --project-path TestProjects/AlembicStandaloneBuild --type project-tests --unity-version 2021.1 --platform {{ platform.runtime }}
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    artifacts.zip:
      paths:
        - "upm-ci~/packages/**/*"
        - "upm-ci~/templates/**/*"
  dependencies:
    - .yamato/upm-ci.yml#pack
{% endfor %}

test_bizarro:
  name: TestsTriggerBizarro
  triggers:
    cancel_old_ci: true
  dependencies:    
    {% for platform in bizarro_standalone_platforms %}  
    - .yamato/upm-ci.yml#testBizarroStandalone_{{platform.name}}
    {% endfor %}


nightly_test_trigger:
  name: Nightly tests Trigger
  triggers:
    recurring:
      - branch: main
        frequency: daily
        rerun: always    
  dependencies:
    - .yamato/upm-ci.yml#pack
    - .yamato/upm-ci.yml#test_trigger
    - .yamato/upm-ci.yml#test_trigger_hdrp
    - .yamato/upm-ci.yml#test_bizarro 

publish_dry_run:
  name: PublishDryRun
  agent:
    type: Unity::VM
    image: package-ci/win10:stable
    flavor: b1.large
    name: Runner
  variables:
    UPMCI_ENABLE_PACKAGE_SIGNING: 1
  commands:
    - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm 
    - upm-ci package publish --package-path com.unity.formats.alembic --dry-run
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    Package.zip:
      paths:
        - "upm-ci~/package/*.tgz"
  dependencies:
    - .yamato/upm-ci.yml#pack
    {% for editor in editors %}
    {% for platform in platforms %}
    - .yamato/upm-ci.yml#test_{{platform.name}}_{{editor.version}}
    - .yamato/upm-ci.yml#testProject_{{platform.name}}_{{editor.version}}
    {% endfor %}
    {% endfor %}

publish:
  name: Publish
  agent:
    type: Unity::VM
    image: package-ci/win10:stable
    flavor: b1.large
    name: Runner
  variables:
    UPMCI_ENABLE_PACKAGE_SIGNING: 1
  commands:
    - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm 
    - upm-ci package publish --package-path com.unity.formats.alembic
  triggers:
    tags:
      only:
        - /^(r|R)(c|C)-\d+\.\d+\.\d+(-(exp|pre)(\.\d+)?)?$/  
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    Package.zip:
      paths:
        - "upm-ci~/package/*.tgz"
  dependencies:
    - .yamato/upm-ci.yml#pack
    {% for editor in editors %}
    {% for platform in platforms %}
    - .yamato/upm-ci.yml#test_{{platform.name}}_{{editor.version}}
    - .yamato/upm-ci.yml#testProject_{{platform.name}}_{{editor.version}}
    {% endfor %}
    {% endfor %}
