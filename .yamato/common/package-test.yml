{% metadata_file .yamato/common/environments.metafile %}
{% metadata_file .yamato/project.metafile %}
---

{% for package in packages -%}
{% for editor in test_editors -%}
{% for runtime_platform in package.runtime_platforms -%}
{% for platform in test_platforms[runtime_platform['0']] -%}
{% if runtime_platform['1'].enabled_platforms -%}
{% unless runtime_platform['1'].enabled_platforms contains platform.name -%}
{% continue -%}
{% endunless -%}
{% endif %}
{%- comment -%}
# Skip if there is no image for this Unity editor version on this platform 
# which means no need to test this Unity editor version on this platform in this test mode
{%- endcomment -%}
{% unless platform[editor.name].image -%}
{% continue -%}
{% endunless -%}
{% if runtime_platform['1'].project_path -%}
{% assign project_path_list = runtime_platform['1'].project_path -%}
{% assign job_is_custom_projects = true -%}
{% else %}
{% assign job_is_custom_projects = false -%}
{% endif -%}
{% assign env_yamato_source_dir = "YAMATO_SOURCE_DIR" | prepend: ci[platform.name].env_prefix | append: ci[platform.name].env_suffix -%}
{% if platform[editor.name].unity_path_var -%}
{% assign env_unity_path = platform[editor.name].unity_path_var -%}
{% else -%}
{% assign env_unity_path = "YAMATO_WORK_DIR" | prepend: ci[platform.name].env_prefix | append: ci[platform.name].env_suffix | append: "/.Editor" -%}
{% endif -%}
{%- comment -%}
# If package_test is set to true or no custom project is set in project_path, then package test will run.
# If there are already custom projects set, then a dummy project will be appended to project_path_list for package test
# If no custom project is set (project_path_list == Nil), then the dummy project for package test will be the only project in project_path_list
{%- endcomment -%}
{% if runtime_platform['1'].package_test == true or job_is_custom_projects == false -%}
{% assign project_path_list = project_path_list | concat: generic_project_path -%}
{% endif -%}
{% for job_project_path in project_path_list %}
{%- comment -%}
# If the project is generic project, then it is package test, name the job accordingly
{%- endcomment -%}
{% if generic_project_path contains job_project_path -%}
test_{{ package.short_name }}_package_{{ runtime_platform['0'] }}_{{ editor.name }}_{{ platform.name }}:
{% if is_monorepo == true -%}
  name : "{{ package.short_name }}: Test {{ runtime_platform['0'] }} package {{ editor.version }} on {{ platform.name }}"
{% else -%}
  name : "{{ runtime_platform['0'] }} mode: Test package in {{ editor.version }} on {{ platform.name }}"
{% endif -%}
{%- comment -%}
# Otherwise the project is a custom project, and it is project test, name the job accordingly
{%- endcomment -%}
{% else -%}
{% assign project_name = job_project_path | replace: "\\", "/" | split: "/" | last | downcase -%}
{% assign display_project_name = job_project_path | replace: "\\", "/" | split: "/" | last | prepend: " " | append: " " -%}
test_{{ package.short_name }}_{{ runtime_platform['0'] }}_{{ project_name }}_{{ editor.name }}_{{ platform.name }}:
{% if is_monorepo == true -%}
  name : "{{ package.short_name }}: Test {{ runtime_platform['0'] }}{{ display_project_name }}{{ editor.version }} on {{ platform.name }}"
{% else -%}
  name : "{{ runtime_platform['0'] }} mode: Test project {{ display_project_name }} in {{ editor.version }} on {{ platform.name }}"
{% endif -%}
{% endif -%}
  agent:
    type: {{ platform.type }}
    image: {{ platform[editor.name].image }}
    flavor: {{ platform.flavor}}
  commands:
{%- comment -%}
# If using_upm-ci set to true, use upm-ci to run the test.
# One exception is if the test project is API scraping test which use UTR to run the test.
{%- endcomment -%}
{% if using_upm-ci == true and project_name != "APITests" -%}
    - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
{%- comment -%}
# Run upm-ci package test if the job is a dummy generic job
{%- endcomment -%}
{% if generic_project_path contains job_project_path -%}
    - {% if platform.name == 'centOS' -%} DISPLAY=:0 {% endif -%} upm-ci package test --unity-version {{ editor.version }} --package-path {{ package.root_dir }}
{%- comment -%}
# Otherwise run upm-ci project test
{%- endcomment -%}
{% elsif runtime_platform['0'] == "editor" -%}
    - {% if platform.name == 'centOS' -%} DISPLAY=:0 {% endif -%} upm-ci project test  --project-path {{ job_project_path }} --type project-tests --unity-version {{ editor.version }}
{% else -%}
    - {% if platform.name == 'centOS' -%} DISPLAY=:0 {% endif -%} upm-ci project test  --project-path {{ job_project_path }} --type project-tests --unity-version {{ editor.version }} --platform standalone
{% endif -%}
  artifacts:
    logs.zip:
      paths:
        - "upm-ci~/logs/**/*"
        - "upm-ci~/test-results/**/*"
    artifacts.zip:
      paths:
        - "upm-ci~/packages/**/*"
        - "upm-ci~/templates/**/*"
  dependencies:
{%- comment -%}
# For tests using upm-ci, package needs to be packed before testing except APIScrapingTests.
{%- endcomment -%}
{% unless project_name == "APITests" -%}  
    - .yamato/dependencies.yml#pack
{% endunless -%}
{%- comment -%}
# Use utr to run the test
{%- endcomment -%}
{% else -%}
{% if platform.name == "win" -%}
    - gsudo powershell.exe -file .yamato\common\scripts~\win_defender_exclusions.ps1
    - gsudo choco source add --priority 1 -n Unity -s {{ artifactory_url }}/api/nuget/unity-choco-local
    - gsudo choco install unity-config -y
    - gsudo choco install unity-downloader-cli -y
    - curl -s {{ artifactory_url }}/unity-tools-local/utr-standalone/utr.bat --output {{ ci["win"].tool_utr }}
{% elsif platform.name == "mac" -%}
    - brew tap --force-auto-update unity/unity {{ homebrew_url }}
    - brew install unity-config
    - curl -s {{ artifactory_url }}/unity-tools-local/utr-standalone/utr --output {{ ci["mac"].tool_utr }}
    - chmod +x {{ ci["mac"].tool_utr }}
{% endif -%}
{% if generic_project_path contains job_project_path %}
    - unity-config project create {{ job_project_path }}
    - unity-config project add testable {{ package.name }}
    - unity-config project add dependency {{ package.name }}@file:./../../../../{{ package.root_dir }}
    - unity-config project set registry {{ npm_registry }}
{% if resolve_dependencies_from_package and resolve_dependencies_from_package == true -%}
    - python .yamato/common/scripts~/AddPackageDependencies.py {{ package.name }} {{ packages_root }} {{ generic_project_path }}
{% endif -%}
{% if package.dependencies -%}
{% for dependency in package.dependencies -%}
    - unity-config project add dependency {{ dependency.name }}@{{ dependency.version }} -p {{ job_project_path }}
{% endfor -%}
{% endif %}
{% endif %}
{% if using_submodule == true %}
    - git submodule update --init --recursive
{% endif %}
    - unity-downloader-cli -u {{ editor.version }} --path {{ env_unity_path }} -c Editor --wait --published-only
    - >
      {{ ci[platform.name].tool_utr }}
      {{ runtime_platform['1'].utr_arg_suite | append: platform.platform }}
      --testproject={{ job_project_path }}
      --editor-location={{ env_unity_path }}
      --artifacts_path={{ log_path }}/{{ package.short_name }}/{{ runtime_platform['0'] }}/{{ platform.name }}/{{ editor.version }}
      --api-profile=NET_4_6
      --testfilter={{ package.assembly }}*
      --enable-code-coverage
      --coverage-pkg-version=1.2.0-exp.7
      --coverage-results-path={{ env_yamato_source_dir }}/{{ log_path }}/{{ package.short_name }}/{{ runtime_platform['0'] }}/{{ platform.name }}/{{ editor.version }}/CoverageResults
      --coverage-options="generateAdditionalMetrics;generateHtmlReport;assemblyFilters:+{{ package.assembly }}*;pathReplacePatterns:**/bokken,c:"
  artifacts:
    logs_{{ runtime_platform['0'] }}_{{ platform.name }}_{{ editor.version }}:
      paths:
        - "{{ log_path }}/**/*"
        - "{{ job_project_path }}/Packages/*.json"
{%- comment -%}
# Add a hook to each test job so that a pre-test job can be run before running the test job
{%- endcomment -%}
{% if tests_dependencies[runtime_platform['0']] -%}
{% if tests_dependencies[runtime_platform['0']] contains platform.name -%}
  dependencies:
    - .yamato/dependencies.yml#{{runtime_platform['0']}}_mode_pre_test_{{ package.short_name }}_{{ editor.name }}_{{ platform.name }}
{% endif -%}
{% endif -%}
{% endif -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}

{% if is_monorepo == true -%}
test_all_packages_all_editors_all_platforms:
  name: "All packages: Test all editors on all platforms"
  dependencies:
{% for package in packages -%}
    - .yamato/common/package-test.yml#test_{{ package.short_name }}_all_editors_all_platforms
{% endfor -%}
{% endif -%}  
{% for package in packages -%}
test_{{ package.short_name }}_all_editors_all_platforms:
{% if is_monorepo == true -%}
  name: "{{ package.short_name }}: Test all editors on all platforms"
{% else -%}
  name : "Test all editors on all platforms"
{% endif -%}  
  dependencies:
{% for editor in test_editors -%}
{% for runtime_platform in package.runtime_platforms -%}
{% for platform in test_platforms[runtime_platform['0']] -%}
{% if runtime_platform['1'].enabled_platforms -%}
{% unless runtime_platform['1'].enabled_platforms contains platform.name -%}
{% continue -%}
{% endunless -%}
{% endif %}
{%- comment -%}
# Skip if there is no image for this Unity editor version on this platform 
# which means no need to test this Unity editor version on this platform in this test mode
{%- endcomment -%}
{% unless platform[editor.name].image -%}
{% continue -%}
{% endunless -%}
{% if runtime_platform['1'].project_path -%}
{% assign project_path_list = runtime_platform['1'].project_path -%}
{% assign job_is_custom_projects = true -%}
{% else %}
{% assign job_is_custom_projects = false -%}
{% endif -%}
{%- comment -%}
# If package_test is set to true or no custom project is set in project_path, then package test will run.
# If there are already custom projects set, then a dummy project will be appended to project_path_list for package test
# If no custom project is set (project_path_list == Nil), then the dummy project for package test will be the only project in project_path_list
{%- endcomment -%}
{% if runtime_platform['1'].package_test == true or job_is_custom_projects == false -%}
{% assign project_path_list = project_path_list | concat: generic_project_path -%}
{% endif -%}
{% for job_project_path in project_path_list -%}
{% if generic_project_path contains job_project_path -%}
    - .yamato/common/package-test.yml#test_{{ package.short_name }}_package_{{ runtime_platform['0'] }}_{{ editor.name }}_{{ platform.name }}
{% else %}
{% assign project_name = job_project_path | replace: "\\", "/" | split: "/" | last | downcase -%}
    - .yamato/common/package-test.yml#test_{{ package.short_name }}_{{ runtime_platform['0'] }}_{{ project_name }}_{{ editor.name }}_{{ platform.name }}
{% endif %}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}

{%- comment -%}
# Below are experiment codes for selecting PR triggered jobs, not ready yet. 
# Just comment out for now
{% if is_monorepo == true -%}
test_all_packages_PR_trigger:
  name: "All packages: Test PR trigger"
  dependencies:
{% for package in packages -%}
    - .yamato/common/package-test.yml#test_{{ package.short_name }}_PR_trigger
{% endfor -%}
{% endif -%}  
{% for package in packages -%}
test_{{ package.short_name }}_PR_trigger:
{% if is_monorepo == true -%}
  name: "{{ package.short_name }}: Test PR trigger"
{% else -%}
  name : "Test PR trigger"
{% endif -%}  
  dependencies:
{% for editor in test_editors -%}
{% for runtime_platform in package.runtime_platforms -%}
{% for platform in test_platforms[runtime_platform['0']] -%}
{% if runtime_platform['1'].enabled_platforms -%}
{% unless runtime_platform['1'].enabled_platforms contains platform.name -%}
{% continue -%}
{% endunless -%}
{% endif -%}
{% if platform[editor.name].pr_trigger == false -%}
{% continue -%}
{% endif -%}
{% if runtime_platform['1'].project_path -%}
{% assign project_path_list = runtime_platform['1'].project_path -%}
{% assign job_is_custom_projects = true -%}
{% else -%}
{% assign project_path_list = generic_project_path -%}
{% assign job_is_custom_projects = false -%}
{% endif -%}
{% for job_project_path in project_path_list -%}
{% assign project_name = job_project_path | replace: "\\", "/" | split: "/" | last | downcase -%}
    - .yamato/common/package-test.yml#test_{{ package.short_name }}_{{ runtime_platform['0'] }}_{{ project_name }}_{{ editor.name }}_{{ platform.name }}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{%- endcomment -%}